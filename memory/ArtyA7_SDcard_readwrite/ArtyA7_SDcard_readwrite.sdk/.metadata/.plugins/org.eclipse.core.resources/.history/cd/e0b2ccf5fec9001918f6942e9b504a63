/*
 * Application to copy contents from a file to ARTY SDRAM.
 * For the PmodSD API see sd_to_ram_bsp/libsrc/PmodSD_v1_0 for more details.
 */
#include "PmodSD.h"
#include "xil_cache.h"
#include "xil_printf.h"

//Function Declarations
void Initialize();
void Run();
//End Function Declarations

int main()
{
	Xil_ICacheEnable();
	Xil_DCacheEnable();

	Initialize();
	Run();
	return 0;
}

void Initialize(){

}

void Run(){
	DXSPISDVOL disk(XPAR_PMODSD_0_AXI_LITE_SPI_BASEADDR,
	         XPAR_PMODSD_0_AXI_LITE_SDCS_BASEADDR);
	DFILE infile;

	// The drive to mount the SD volume to.
    // Options are: "0:", "1:", "2:", "3:", "4:"
    static const char szDriveNbr[] = "0:";

    FRESULT fr;
    u32 bytesRead, totalBytesRead;
    u32 fsize;

    //The address range of SDRAM (mig_7series) is located under wrapper's system.hdf
    u8 *ram = (u8*)0x80000000;

    //Mount the disk
    DFATFS::fsmount(disk, szDriveNbr, 1);

    //open file for read only
    fr = infile.fsopen("newfile.txt", FA_READ);
    if(fr == FR_OK){
    	fsize = infile.fssize();
    	u8 buff[fsize];
    	u8 *buffptr = buff;

    	//read data into buffer
    	do {
    		fr = infile.fsread(buffptr, 1, &bytesRead);
    		buffptr++;
    		totalBytesRead += bytesRead;
    	} while (totalBytesRead < fsize && fr == FR_OK);

    	// fr = infile.fsread(&buff, fsize, &bytesRead);
    	// totalBytesRead += bytesRead;

    	if(fr == FR_OK)
    	{
    		//Set last byte to NULL
    		buff[totalBytesRead] = 0;
    		memcpy(ram, buff, fsize);
    	}
    	else{
    		//Failed to read the file
    	}
    }
    else{
    	// Failed to open file to read
    }

    while(1);
}


